using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Binary_Search_Tree 
{
    class Program
    {
        static void Main()//string[] args)
        {
            BST tree = new BST();
            int dataValue = 5;
            int keyValue = 0;
            bool handler = false;

            Console.WriteLine("Binary Search Tree Menu");
            Console.WriteLine("1: Insert Node");
            Console.WriteLine("2: Remove Node");
            Console.WriteLine("3: Max Node"); //Not implemented
            Console.WriteLine("4: Display All Nodes"); //Not implemented
            Console.WriteLine("5: Automated Insert Test"); //Inserts 5 Nodes
            Console.WriteLine("6: Automated Remove Test"); //Inserts and Removes the 5 inserted nodes simultaneously
            Console.WriteLine("7: Close Program"); //Closes Application
            
            do
            {
                try
                {
                    int input = Convert.ToInt32(Console.ReadLine());
                    switch (input)
                    {
                        case 1:
                            Node node = new Node();
                            string keyInput;
                            int key;
                            Console.WriteLine("Please enter a integer key value: ");
                            keyInput = Console.ReadLine();
                            key = Convert.ToInt32(keyInput);
                            node.key = key;
                            tree.Insert(node);
                            break;
                        case 2:
                            string keyToRemove;
                            Console.WriteLine("Please enter the key value of the desired node to be removed: ");
                            keyToRemove = Console.ReadLine();
                            key = Convert.ToInt32(keyToRemove);
                            tree.Remove(key);
                            //Console.WriteLine("You have removed the node with the key value of: " + key);
                            break;
                        case 3:
                            
                            break;
                        case 4:
                            break;
                        
                        case 5:
                            for (int i = 1; i <= 5; i++)//Insert Five Nodes
                            { 
                                Node newNodeToInsert = new Node();
                                AutomatedInsert(newNodeToInsert);
                                Console.WriteLine(newNodeToInsert + " has a key value of: " + newNodeToInsert.key +
                                                  " and a data value of: " + newNodeToInsert.data + ".");
                            }
                            break;
                        case 6:
                            for (int i = 5; i >= 1; i--)//Insert and Remove Five nodes
                            { 
                                Node newNodeToRemove = new Node();
                                AutomatedInsert(newNodeToRemove);
                                Console.WriteLine(newNodeToRemove + " has a key value of: " + newNodeToRemove.key +
                                                  " and a data value of: " + newNodeToRemove.data + ".");
                                AutomatedRemove(newNodeToRemove);
                                Console.WriteLine(newNodeToRemove + " with a key value of: " + newNodeToRemove.key +
                                                  " and a data value of: " + newNodeToRemove.data + " has been removed.");
                            }
                            break;
                        case 7:
                            handler = true;
                            break;
                        default:
                            Console.WriteLine("Please enter a valid choice.");
                            break;

                    }
                }
                catch 
                {
                    break;
                }
            } while (!handler);

            void AutomatedInsert(Node node)
            {
                node.data = dataValue--;
                node.key = keyValue++;
                tree.Insert(node);
            }

            void AutomatedRemove(Node node)
            {
                tree.Remove(node.key);
            }

        }
       
    }
}

public class BST
{
    public Node root = new Node(); //Creates a reference to the root node of the BST

    public void Insert(Node newNode) //Inserts a new node to BST
    {
        if (root == null)
        {
            root = newNode; //if the BST's root is null, set the new node to the root of the BST
            return;
        }

        //The new node being insrted references the root to start it's traversal
        Node tempNode = root; //Sets a temporary reference to the current node being inserted


        while (newNode != null)
        {
            if (newNode.key > tempNode.key) //If the new node's key is greater than the temp node's key
            {
                if (tempNode.right == null) //If the temp node's right object reference is null
                {
                    tempNode.right = newNode; //Set the new node to the temp node's right reference
                    newNode.parent = tempNode; //The temp node is the new node's parent reference
                    Console.WriteLine("New Node is Root's Right.");
                    break;
                }
                else tempNode = tempNode.right; //Set the temp node's right object reference to the object reference of temp node
            }
            else if (newNode.key < root.key) //If the new node's key is greater than the temp node's key
            {
                if (tempNode.left == null) //If the temp node's left object reference is null
                {
                    tempNode.left = newNode; //Set the new node to the temp node's left reference
                    newNode.parent = tempNode; //The temp node is the new node's parent reference
                    Console.WriteLine("Parent is Root's Left.");
                    break;
                }
                else tempNode = tempNode.left;
            }
            else if (newNode.key == tempNode.key) //If the new node's key is equal to the temp node's key
            {
                tempNode.data = newNode.data; //Replaces the temp node's data with the new node's data
                Console.WriteLine("Parent is Root.");
                break;
            }
        }
    }

    public void Remove(int key)
    {
        Node tempNode = root;
        while (tempNode != null)
        {
            if (key > tempNode.key)
                tempNode = tempNode.right;
            else if (key < tempNode.key)
                tempNode = tempNode.left;
            else if (key == tempNode.key)
            {
                tempNode = null;
                Console.WriteLine("Removed Node with Key: " + key);
                break;
            }
        }
    }

}

public class Node
{
    public Node parent; //Reference to the node's parent object
    public Node left, right; //Reference to the node's left and right child object 
    public int key; //Stores the node's key value
    public int data; //Store's the node's data
}
